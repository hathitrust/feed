package HTFeed::Version;

use warnings;
use strict;
use Carp;

use File::Basename;
use Getopt::Long qw(:config pass_through no_ignore_case no_auto_abbrev);

use base qw( Exporter );
our @EXPORT_OK = qw( get_vstring get_full_version_string);

##################################################
#            HTFeed version strings              #
#  This block is generated by make, do not edit  #
##################################################
########## End HTFeed version strings ############

my ($vstring, $full_version_string) = (get_vstring(), get_full_version_string());
# die by default
unless($vstring and $full_version_string) {
    die("feed cannot find it's version");
}

use version;

sub get_vstring {
    return $ENV{VERSION};
}

sub get_full_version_string {
    return $ENV{VERSION};
}

sub import{
    my $self = shift;
    my @options = grep(/^:no_getopt$/, @_);

    $self->SUPER::export_to_level(1, $self, grep(!/^:no_getopt$/, @_));

    # process --version and --Version command line ops
    unless ($options[0] and $options[0] eq ":no_getopt") {
        my ($short, $long);
        GetOptions ( "version" => \$short, "Version" => \$long );
        _long_version() and exit 0 if ($long);
        _short_version() and exit 0 if ($short);
    }
}

sub _short_version{
    print "Feed, the HathiTrust Ingest System. Feeding the Elephant since 2010.\n";
    print get_full_version_string(),  "\n";
}

sub _long_version{
    _short_version();
    # convert paths to module names; return all those that are a subclass
    # of the given class
	require HTFeed;
    HTFeed::load_namespaces();
    HTFeed::load_pkgtypes();

    print "\n*** Loaded Namespaces ***\n";
    print join("\n",map {HTFeed::id_desc_info($_)} ( sort( HTFeed::find_subclasses("HTFeed::Namespace") )));
    print "\n*** Loaded PackageTypes ***\n";
    print join("\n",map {HTFeed::id_desc_info($_)} ( sort( HTFeed::find_subclasses("HTFeed::PackageType") )));
    print "\n*** Loaded Stages ***\n";
    print join("\n",sort( HTFeed::find_subclasses("HTFeed::Stage")));
    print "\n";
}

sub _try_test_version {
  return unless $ENV{TEST};

  my ($vstring,$full_version_string) = @_;

  $$vstring = "0.0.0";
  $$full_version_string = "TEST";
}

1;
__END__

=head1 NAME

HTFeed::Version - Version management

=head1 SYNOPSIS

Version.pm provides methods for Feed tool version maintenence

=head1 DESCRIPTION

Can be used in a pl to enable -version and -Version flags

In script.pl:
use HTFeed::Version;

At command line:
script.pl -version
script.pl --Version

=cut
